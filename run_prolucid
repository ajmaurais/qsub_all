#!/bin/bash
#
# This script takes in one directory as an argument, checks that the dir exists,
# and run prolucid on all ms2 files found in dir, by generating a .pbs file for
# each file and submiting it to the queue.
#

#Written by Aaron Maurais 17_Jan_2016

#global vars
pbs_base="prolucid"

#default args
mem="12"
nodes="1"
ppn="1"
walltime="96:00:00"
force=false
submit_jobs=true
wd=$(pwd)
prolucid_path="~/local/prolucid1_3/ProLuCID1_3.jar"

#displays usage information and exits program
function usage {
	echo -e '\nusage: run_prolucid [-d <dirrectory>]'
	echo -e '\t\t[-m <mem>]\n\t\t[-n <nodes>]\n\t\t[-p <ppn>]\n\t\t[-w <walltime>]\n\t\t[-f]\n\t\t[-h]\n\t\t[--dontSubmit]\n'
	exit
}

#checks that $1 is not empty or a flag
function isArg {
	if [[ $1 == -* ]] || [[ -z "$1" ]] ; then
		usage
	fi
}

#returns the absolute path of a relative reference
function absPath {
	if [ -d "$1" ]; then
		( cd "$1"; echo $(dirs -l +0))
	else
		( cd "$(dirname "$1")"; d=$(dirs -l +0); echo "${d%/}/${1##*/}" )
	fi
}


#generates a .pbs file in dir $1 for a extensionless file name $2
pbs_count=0
pbs_name_temp=$(printf "$pbs_base"_"%02d".pbs $pbs_count)
function generatePBS {
    pbs_count=$((pbs_count+1))
    pbs_name_temp=$(printf "$pbs_base"_"%02d".pbs $pbs_count)
    echo $pbs_name_temp
	#escape spaces in $1 and $2
	dir="$(echo $1 | sed 's/ /\\ /g')"
	file="$(echo $2 | sed 's/ /\\ /g')"
	echo '#!/bin/tcsh' > $pbs_name_temp
	echo '#PBS -l mem='$mem'gb,nodes='$nodes':ppn='$ppn',walltime='$walltime >> $pbs_name_temp
	echo 'cd '$dir >> $pbs_name_temp
	echo -e 'java -Xmx2048m -jar '$prolucid_path' '$file'.ms2 >' $file'.log\n' >> $pbs_name_temp
}

#begin main

#get args
while ! [[ -z "$1" ]] ; do
	case $1 in
		"-d")
			shift
			isArg "$1"
			wd=$(absPath "$1");;
		"-m")
			shift
			isArg "$1"
			mem="$1" ;;
		"-n")
			shift
			isArg "$1"
			nodes="$1" ;;
		"-p")
			shift
			isArg "$1"
			ppn="$1" ;;
		"-w")
			shift
			isArg "$1"
			walltime="$1" ;;
		"-f")
			force=true ;;
		"--dontSubmit")
			submit_jobs=false ;;
		"-h")
			usage ;;
		*)
			usage ;;	
	esac
	shift
done

#check if first argument points to a dir that exists
if [ ! -d "$wd" ] ; then
    echo "Directory does not exist"
    exit
fi

#check if dir contains .ms2 files
if [ $(ls -l "$wd"/*.ms2 | wc -l) -lt 1 ] ; then
    echo "ms2 files could not be found in the specified directory! Exiting..."
    exit
fi

#list all .ms2 files found in the dir and ask the user if they would like to continue
cd "$wd"
if ! $force ; then
	echo "The following ms2 files were found in "$wd
	ls -1 *.ms2
	echo "Would you like to run prolucid on the above files? (y/n)"
	read choice
	while [ "$choice" != "y" ] && ( [ "$choice" != "n" ] || [[ -z "$choice" ]] ) ; do
		echo "Invalid choice!"
		echo "Would you like to continue (y/n)"
		read choice
	done
	if [ "$choice" == "n" ] ; then
		echo "Exiting..."
		exit
	fi
fi

#check that a search.xml file is in dir
if [ ! -f "$wd"/search.xml ] ; then
    echo "A search.xml file was not found in the specified directory! Exiting..."
    exit
fi

#run proludic on all .ms2 files in the dir
for file in ./*.ms2 ; do
    fileNoExtension=${file::${#file}-4}
    generatePBS "$wd" "$fileNoExtension"
    echo $fileNoExtension
	if $submit_jobs ; then
		qsub $pbs_name_temp
	fi
done

echo "Success!"

#end
